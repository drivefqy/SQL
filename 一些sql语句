mapreduce 求共同好友题目sql实现
with t1 as (
	select
		   user,
		   friend
	from friends lateral view explode(friends_list) result as friend
)
select
        user,
		collect_set(friend)
from (
	select
			concat_ws("-",t.user,t1.user) as user,
			t.friend
	from t1 t  join t1 on t.friend = t1.friend and t.user < t1.user
)t2 group by user

窗口函数练习
链接：https://blog.csdn.net/a934079371/article/details/108301730
第一套：
1.使用 over() 函数进行数据统计, 统计每个用户及表中数据的总数
select
        *,
		count(1) over () as windows
from windows
2.求用户明细并统计每天的用户总数
select
		*,
		count(1) over(partition by logday) as everyday_sum
from windows
计算从第一天到现在的所有 score 大于80分的用户总数
select
		*,
		count(1) over(rows between unbounded preceding and current row) as total
from windows
where score > 80
计算每个用户到当前日期分数大于80的天数
select
		*,
		count(1) over(partition by userid order by logday
		rows between unbounded preceding and current row) as total
from windows
where score > 80
第二套：
1.查询2017-04购买的顾客总人数
select
		*,
		count(1) over(partition by name) as cnt
from windows
where substring(orderdate,6,2) = 4
2.查询顾客购买明细及月份总额
select
		*,
		sum(cost) over(partition by substring(orderdate,1,7)
		order by substring(orderdate,1,7) ) as total_sum
from windows
3.查询顾客购买明细和月总额按时间累加
select
		*,
		sum(cost) over(partition by substring(orderdate,1,7)
		order by substring(orderdate,1,7) ) as total_sum,
		sum(cost) over(partition by substring(orderdate,1,7)
								order by substring(orderdate,1,7)
								rows between unbounded preceding and current row
								) as acc_sum
from windows
4.查询顾客上次购买时间，以及下次购买时间(电商网站常用于求页面跳转的前后时间)
select
		*,
		lag(orderdate,1,"1970-01-01") over(partition by name order by orderdate) as window1,
		lead(orderdate,1,"9999-12-31") over(partition by name order by orderdate) as window2
from windows
lag lead 不能指定窗口范围会报错
第三套：
1.每门学科学生成绩排名(是否并列排名、空位排名三种实现)
select
		*,
		dense_rank() over (partition by subject order by score) as rank1,
		rank() over (partition by subject order by score) as rank2,
		row_number() over (partition by subject order by score) as rank3
from windows
2.每门学科成绩排名top n的学生
select
        *
from (
select
		*,
		dense_rank() over (partition by subject order by score desc) as rank1,
		rank() over (partition by subject order by score desc) as rank2,
		row_number() over (partition by subject order by score desc) as rank3
from windows
) t1 where  rank1 < 5
第四套：
求出每名用户(明细)的月累积访问量以及到当前月的总访问量(汇总)
select
		*,
		sum(visitCount) over(partition by userId,substring(visitDate,1,6) ) as user_total,
		sum(visitCount) over(partition by substring(visitDate,1,6)) as total
from windows
基础50道:
表结构及部分数据
建表语法参考：https://blog.csdn.net/heiren_a/article/details/124628981
数据参考：https://blog.csdn.net/E699A8/article/details/107139850?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~default-0-107139850-blog-124628981.235^v28^pc_relevant_t0_download&spm=1001.2101.3001.4242.1&utm_relevant_index=3
   teacher                    course
|tid|tname|          |cid|cname|tid|
|  1| 张三|             |  1| 语文|  2|
|  2| 李四|				|  2| 数学|  1|
|  3| 王五|               |  3| 英语|  3|
   score
|sid|cid|scores|              student
+---+---+------+           id    name   birthday  sex
|  1|  1|    80|          01	赵雷	1990-01-01	男
|  1|  2|    90| 			02	钱电	1990-12-21	男
|  1|  3|    99|				03	孙风	1990-05-20	男
1.查询"01"课程比"02"课程成绩高的学生的信息及课程分数
select
        *
from  student s
join
(select
		t1.*,
		t2.cid as tcid,
		t2.scores as tscores
from score t1
join score  t2
on t1.sid = t2.sid and t1.scores > t2.scores and t1.cid =1 and t2.cid =2) t3
on  s.sid = t3.sid
2.查询"01"课程比"02"课程成绩低的学生的信息及课程分数
select
        *
from  student s
join
(select
		t1.*,
		t2.cid as tcid,
		t2.scores as tscores
from score t1
join score  t2
on t1.sid = t2.sid and t1.scores < t2.scores and t1.cid =1 and t2.cid =2) t3
on  s.id = t3.sid
3.查询平均成绩大于等于60分的同学的学生编号和学生姓名和平均成绩
select
		*
from student s
join (
		select
				sid,
				fromat_number(avg(scores) ,2) as avg_score
		from score
		group by sid
		having avg_score >= 60
) t1
on s.id = t1.sid
4.查询平均成绩小于60分的同学的学生编号和学生姓名和平均成绩:(包括有成绩的和无成绩的)
select
        *
from(
		select
				s.*,
				nvl(avg_score,0.00) as avg_score
		from student s
		left join (
				select
						sid,
						format_number(avg(scores) ,2) as avg_score
				from score
				group by sid
		) t1
		on s.id = t1.sid
) t2 where cast(avg_score as int) <   60     join --->  where  ---> select
5.查询所有同学的学生编号、学生姓名、选课总数、所有课程的总成绩
select
        s.*,
		ifnull(t1.cid_cnt,0),
		ifnull(t1.total,0)
from student s
left join  (
		select
				sid,
				count(distinct cid) as cid_cnt,
				sum(scores) as total
		from  score
		group by sid ) t1
on s.id = t1.sid
6.查询"李"姓老师的数量:
select count(1) as cnt from teacher where tname like "李%";
7.查询学过"张三"老师授课的同学的信息:
select
        *
from student s
join(
		select
			   s.sid,
			   t1.cname,
			   t1.tname,
			   t1.tid
		from score s
		join (
				select
						c.cname,
						c.cid,
						t.tname,
						t.tid
				from course c
				join teacher t
				on c.tid = t.tid and t.tname = "张三") t1
		on s.cid = t1.cid
) t2 on s.id = t2.sid order by id
8.查询没学过"张三"老师授课的同学的信息:
没学过的 = 所有学生 - 学过的学生    mapreduce  分而治之思想
select
        *
from student s
left join(
		select
			   s.sid,
			   t1.cname,
			   t1.tname,
			   t1.tid
		from score s
		join (
				select
						c.cname,
						c.cid,
						t.tname,
						t.tid
				from course c
				join teacher t
				on c.tid = t.tid and t.tname = "张三") t1
		on s.cid = t1.cid
) t2 on s.id = t2.sid where t2.sid is null order by id
9.查询学过编号为"01"并且也学过编号为"02"的课程的同学的信息:
select
       *
from student s
join (
	select t3.sid from(
		(select score.sid from score where cid = 1) t1
		join
		(select score.sid as tmp from score where cid = 2) t2
		on t1.sid = t2.tmp
	)t3
) t4 on t4.sid = s.id
10.查询学过编号为"01"但是没有学过编号为"02"的课程的同学的信息
     没有学过 = 全部 - 学过  分而治之思想
select
        *
from student s
left join (
		select
			   *
		from student s
		join (
			select t3.sid from(
				(select score.sid from score where cid = 1) t1
				join
				(select score.sid as tmp from score where cid = 2) t2
				on t1.sid = t2.tmp
			)t3
		) t4 on t4.sid = s.id
) t5 on s.id = t5.sid  where sid is null
11.查询没有学全所有课程的同学的信息
select
		*
from student s
join (
		select
				*
		from (select
						sid,
						count(distinct cid) as cnt
				from score
				group by sid
		) t1 where cnt < (select count(1) from course)
)t2  on t2.sid =  s.id
12.查询至少有一门课与学号为"01"的同学所学相同的同学的信息
select
		*
from student s1
join (select
				s.sid
		from score s
		join (
			select
					sid,
					cid
			from score where sid = 1
		)t1 on s.cid = t1.cid  group by s.sid
) t2  on  s1.id = t2.sid order by s1.id
13.查询和"06"号的同学学习的课程完全相同的其他同学的信息  公用表达式
with t1 as(
    select
			cid
	from score
	where  sid = 6
)
select
		*
from student s1
join (
		select
				s.sid
		from score s
		join t1 on  s.cid = t1.cid
		where s.sid != 6
		group by s.sid
		having count(1) = (select count(1) from t1)
)t2 on s1.id = t2.sid
14.查询没学过"张三"老师讲授的任一门课程的学生姓名
     没学过 = 全部  - 学过  分而治之思想 mapreduce
select
       *
from student s
left join (
		select
				s.sid
		from score  s
		join (
				select
						*
				from course c
				join (
					select * from (
					select
						   tid
					from teacher
					where tname = "张三") tmp
				) t1 on t1.tid =  c.tid
		)t2 on s.cid = t2.cid
		group by s.sid
) t3 on t3.sid = s.id
where t3.sid is null
15.查询两门及其以上不及格课程的同学的学号，姓名，每门课程的分数及其平均成绩
在明细表中查询汇总结果用开窗函数
select
        *
from student s
join (
	select
		   *
	from(
		select
				*,
				format_number(avg(scores) over(partition by sid order by scores),2) as avg_,
				count(1) over (partition by sid) as cnt
		from score s
		where scores < 60
	)t1 where cnt >= 2
) t2 on t2.sid = s.id
16.检索"01"课程分数小于60，按分数降序排列的学生信息 白给 可以在join 前进行分组 答案更标准
select
		*
from student s
join (  select sid,scores from score where scores < 60  ) t1
on  t1.sid = s.id order by scores
17.按平均成绩从高到低显示所有学生的所有课程的成绩以及平均成绩
   在明细查询中展示汇总结果用开窗函数
select
        *，
		format_number(avg(scores) over(partition by sid ),2) as avg_,
		sum(scores) over(partition by sid) as total
from score order by  total desc;
18.查询各科成绩最高分、最低分和平均分：
以如下形式显示：课程ID,课程name,最高分,最低分,平均分,及格率,中等率,优秀率
利用聚合函数不会对null 计算的特点
select
		*
from course c
join (
	select
			cid,
			max(scores) as max,
			min(scores) as min,
			round(avg(scores),2) as avg,
			round((count(if(scores > 60,1,null)) / count(1)),2) as pass,
			round((count(if(scores > 70 and scores < 80,1,null)) / count(1)),2) as good,
			round((count(if(scores > 80 ,1,null)) / count(1)),2) as excellent
	from score
	group by cid
)t1 on c.cid = t1.cid order by c.cid
19.按学生各科成绩进行排序，并显示排名
在明细查询中展示汇总结果用开窗函数 白给
select
		*,
		rank() over(partition by sid order by scores) as rank1,
		dense_rank() over(partition by sid order by scores) as rank2,
		row_number() over(partition by sid order by scores) as rank3
from score
20.查询学生的总成绩并进行排名
select
		*,
		rank() over(order by avg1 desc) as rank1,
		dense_rank() over(order by avg1 desc) as rank2,
		row_number() over(order by avg1 desc) as rank3
from (
	select
			sid,
			sum(scores) as avg1
	from score s
	group by s.sid
)t1
21.查询不同老师所教不同课程平均分从高到低显示
select
        *
from course c
join  teacher t
on t.tid = c.tid
join (
select
		cid,
		round(avg(scores) as avg_score,2)
from score
group by cid ) t1
on c.cid = t1.cid
order by avg_score
22.查询所有课程的成绩第2名到第3名的学生信息及该课程成绩
select
		*
from (
	select
			*,
			rank() over(partition by cid order by scores desc ) as ranks,
			sum(scores) over(partition by cid) as total
	from score
)t1 where ranks >=2 and ranks <= 3
23.统计各科成绩各分数段人数：
课程编号,课程名称,[100-85],[85-70],[70-60],[0-60]及所占百分比 简化了
select
		c.cname,
		t1.*
from course c
join (
	select
			cid,
			concat(format_number(count(if(scores > 80,1,null)) *100 / count(1),2),"%") as excelleng,
			concat(format_number(count(if(scores < 80 and scores >70,1,null)) *100 / count(1),2),"%") as good,
			concat(format_number(count(if(scores >60,1,null)) *100 / count(1),2),"%") as pass
	from score
	group by cid
)t1 on t1.cid = c.cid
24.查询学生平均成绩及其名次
select
		*,
		rank() over(order by avg_score desc)
from (
	select
			sid,
			avg(scores) as avg_score
	from score
	group by sid
)t1
25.查询各科成前三名的记录
select
		*
from studen s
join (
	select
			*
	from (
		select
				*,
				dense_rank() over(partition by cid order by scores desc ) as ranks
		from score
	)t1
	where ranks <3
)t2 on s.id = t2.sid
26.查询每门课程被选修的学生数
select
		t1.*,
		c.cname
from course c
join (
	select
			cid,
			count(distinc sid) as cnt
	from score s
	group by cid
)t1 on t1.cid = c.cid
27.查询出只有两门课程的全部学生的学号和姓名
select
		*
from student s
join (
	select
			if(count(1) =2,sid,0)
	from score
	group by sid
)t1 on t1.sid = s.id
28.查询男生、女生人数  利用聚合函数去掉null特点
select
		sex,
		count(1) as cnt
from student group by sex
29.查询名字中含有"风"字的学生信息
select
		*
from student
where name like "%风%"
30.查询同名同性学生名单，并统计同名人数
select
        name,
		sex,
		count(1) as cnt
from student s
group by name,sex having cnt >= 2
31.查询1990年出生的学生名单
select
		*
from student
where year(birthday) = 1990
32.查询每门课程的平均成绩，结果按平均成绩降序排列，平均成绩相同时，
按课程编号升序排列
select
       t1.*
from course c
join (
	select
			cid,
			round(avg(scores),2)  as avg_scores
	from score s
	group by cid
)t1 on t1.cid = c.cid
order by avg_scores desc,t1.cid asc
33.查询平均成绩大于等于85的所有学生的学号、姓名和平均成绩
select
		*
from student s
join (
	select
			sid,
			round(avg(scores),2) as avg
	from score
	group by sid
	having avg > 85
)t1 on t1.sid = s.id
34.查询课程名称为"数学"，且分数低于60的学生姓名和分数
select
		*
from student s
join (
select
		sid,
		scores
from score
where cid = (select cid from course where cname = "数学") and scores < 60 ) t1
on t1.sid =  s.id
35.查询所有学生的课程及分数情况
明细表 开窗函数
select
		s.*,
		nvl(t1.scores,0),
		nvl(t1.cid,0)
from student s
left join(
	select
			*,
			sum(scores) over(partition by sid) as total
	from score
)t1 on t1.sid = s.id
36.查询任何一门课程成绩在70分以上的学生姓名、课程名称和分数
 只要有一门小于70分都不舍掉，所以先选出小于70的sid 然后 left join
 为null 说明没有join 上，说明该sid 都是的分数都是大于70
select
		*
from student stu
join (
	select
			score.*
	from score
	left join(
	   select sid from score where scores < 70 group by sid
	)t1 on t1.sid = score.sid
	where t1.sid is null
)t2 on stu.id = t2.sid
37.查询课程不及格的学生
select
		*
from student s
join (
	select
			sid
	from score
	where scores < 60
	group by sid
)t1 on t1.sid = s.id
38.查询课程编号为01且课程成绩在80分以上的学生的学号和姓名
select
		*
from student s
join (
	select
		   sid
   from score
   where scores > 80 and cid = 1
)t1 on t1.sid = s.id
39.求每门课程的学生人数
select
		cid,
		count(1) as cnt
from score
group by cid
40.查询选修"张三"老师所授课程的学生中，成绩最高的学生信息及其成绩
select
		*
from student stu
join (
		select
				s.*
		from score s
		join (
			select
					max(scores) as max_score,
					cid
			from score
			where cid in (
				select
					   c.cid
				from course c
				join teacher t
				on c.tid = t.tid and t.tname = "张三"
			) group by cid
		)t1 on s.cid = t1.cid and max_score = s.scores
)t2 on t2.sid = stu.id
41.查询不同课程成绩相同的学生的学生编号、课程编号、学生成绩
select
        *
from student stu
join (
	select
			s.*
	from score s
	join (
			select
					if(count(scores) >= 2,sid,0) as sid,
					scores
			from score
			group by sid,scores
	)t1 on t1.sid = s.sid and t1.scores = s.scores
)t2 on stu.id = t2.sid
42.查询每门课程成绩最好的前三名
select
		*
from course c
join (
	select
			*
	from(
		select
				*,
				dense_rank() over(partition by cid order by scores desc)  as ranks
		from score
	)t1 where ranks <= 3
)t2 on c.cid = t2.cid
43.统计每门课程的学生选修人数（超过5人的课程才统计）:
要求输出课程号和选修人数，查询结果按人数降序排列，若人数相同，按课程号升序排列
select
		if(count(1) >= 5,cid,0) as cid,
		count(1) as cnt
from score s
group by cid
order by cnt desc,cid asc
44.检索至少选修两门课程的学生学号
select
		*
from student stu
join (
	select
			if(count(1) >= 2,sid,0) as sid
	from score
	group by sid
)t1 on stu.id = t1.sid
45.查询选修了全部课程的学生信息
select
		*
from student stu
join (
	select
			if(count(1) = (select count(1) from course),sid,0) as sid
	from score
	group by sid
)t1 on t1.sid = stu.id
46.查询各学生的年龄(周岁):
按照出生日期来算，当前月日 < 出生年月的月日则，年龄减一
select
       s_name,
	   s_birth,
      (year(CURRENT_DATE)-year(s_birth)-
        (case when month(CURRENT_DATE) < month(s_birth) then 1
          when month(CURRENT_DATE) = month(s_birth) and day(CURRENT_DATE) < day(s_birth) then 1
          else 0 end)
        ) as age
from student;
47.查询本周过生日的学生:
select
		*
from student
where weekofyear(concat(year(current_date()),'-',date_format(birthday,'MM-dd')))=
weekofyear(current_date())
48.查询下周过生日的学生:
select
		*
from student stu
where weekofyear(birthday) +1  == weekofyear(now())
49.查询本月过生日的学生:
select
		*
from student s
where month(birthday) = month(now())
50.查询12月份过生日的学生:
select
		*
from student
where month(birthday) = 12
15道练习
1.统计出每个用户的累积访问次数
select
		id,
		month,
		cnt,
		sum(cnt) over(partition by id order by month
		rows between unbounded preceding and current row) as total
from (
	select
			userId as id,
			substring(visitDate,1,7) as month,
			sum(visitCount) as cnt
	from action
	group by userId,substring(visitDate,1,7)
)t2
已知一个表STG.ORDER(order_tab)，有如下字段:
 dt，order_id，user_id，amount。
 2017-01-01,10029028,1000003251,33.57。
给出 2017年每个月的订单数、用户数、总成交金额。

select
		substring(dt,1,7) as month,
		count(*) as order_cnt,
		count(distinct user_id) as cnt,
		sum(amount) as total
from t1
group by substring(dt,1,7)

2）给出2017年11月的新客数(指在11月才有第一笔订单)
分而治之
select
		*
from (
	select
			*
	from t1
	where substring(dt,1,7) = "2017-11"
)small_table
left join (
	select
			user_id
	from t1
	where date(substring(dt,1,7)) < "2017-11"
	group by user_id
)t2 on small_table.user_id = t2.user_id
where t2.user_id is null

select
		*
		row_number() over(partition by user_id order by substring(dt,1,7))
from ordertable
where date_format(dt, 'yyyy-MM') = '2017-10'


有一个5000万的用户文件(user_id，name，age) user_file，
一个2亿记录的用户看电影的记录文件(user_id，url) film file，
根据年龄段(每隔10岁算一个年龄段)观看电影的次数进行排序
select
		age_,
		count(1) as cnt
from(
	select

	from user_file
	join film
	on user_file.user_id = film.user_id
)t1
group by age_
order by cnt desc

select
		age_,
		count(1) as cnt
from (
	select
			(case when age < 10  then 1
				when 10<= age and age < 20 then 2
				when 20<= age and age < 30 then 3
				when 30<= age  and age < 40 then 4
				when 40<= age and age < 50 then 5
				when 50<= age and age < 60 then 6
				when 60<= age and age  < 70 then 7
				when 70<= age and age < 80 then 8
				when 80<= age and age < 90 then 9
				else 10 end) as age_,
				user_id
	from user_file
)t1
join film
on t1.user_id = film.user_id
group by age_
distribute by age_
sort by cnt
有日志如下，请写出代码求得所有用户和活跃用户的总数及平均年龄。
活跃用户指连续两天都有访问记录的用户 user_file字段（date,user_id,age）
select
		avg(age),
		count(1) as total
from (
select
distinct
		   user_id
from (
	select
	distinct
			*,
			lead(dt,1,"9999-12-31") over (partition by user_id order by dt)
			as next_day
	from log1
)t1 where date_add(dt,1) = next_day
) t1
join log1
on t1.user_id = log1.user_id
union all
select
		avg(age),
		count(1)
from log1

请用sql写出所有用户中在今年10月份第一次购买商品的金额，
表ordertable字段（购买用户：userid，金额：money，
购买时间：paymenttime(格式：2017-10-01)，订单id：orderid）
select
		*
from ordertable o
left join (
	select
			*
	from ordertable
	where date(substring(paymenttime,1,7)) < "2017-10"
)t1 on o.userid = t1.userid and o.paymenttime = "2017-10"
where t1.userid is null

time string,interface string,ip
时间                          接口                                      ip地址
2016-11-09 14:22:05 /api/user/login                      110.23.5.33
2016-11-09 14:23:10 /api/user/detail                     57.3.2.16
2016-11-09 15:59:40 /api/user/login                       200.6.5.166
求11月9号下午14点（14-15点），访问/api/user/login接口的top10的ip地址

select
		*
from (
	select
			*,
			dense_rank() over (partition by interface order by time) as top
	from ip
	where substring(time,1,13) = "2016-11-07 14" and interface = "/api/user/login"
)t1 where top = 10

查询充值日志表2015年7月9号每个区组下充值额最大的账号，要求结果：
区组id，账号，金额，充值时间
select
		*
from (
	select
			id,
			account,
			money,
			create_time,
			rank() over (partition by id order by money desc) as ranks
	from credit_log
	where create_time = "2015-07-09"
)t1 where ranks = 1

有三张表分别为会员表（member）销售表（sale）退货表（regoods）
（1）会员表有字段memberid（会员id，主键）credits（积分）；
（2）销售表有字段memberid（会员id，外键）购买金额（MNAccount）；
（3）退货表中有字段memberid（会员id，外键）退货金额（RMNAccount）；
2）业务说明：
（1）销售表中的销售记录可以是会员购买，也可是非会员购买。
（即销售表中的memberid可以为空）
（2）销售表中的一个会员可以有多条购买记录
（3）退货表中的退货记录可以是会员，也可是非会员
（4）一个会员可以有一条或多条退货记录
查询需求：分组查出销售表中所有会员购买金额，同时分组查出退货
表中所有会员的退货金额，把会员id相同的购买金额-退款金额得到的结
果更新到会员表中对应会员的积分字段（credits）

insert into table member  (
select
		memberid,
		(total - total1) as sum_
from (
	select
			memberid,
			sum(MNAccount) as total
	from sale
	group by  memberid
	having memberid is not null
)t1
join (
	select
			memberid,
			sum(RMNAccount) as total1
	from regoods
	group by memberid
	having memberid is nou null
)t2 on t1.memberid = t2.memberid
)
SQL表user_time中字段是user_id , time(用户访问时间),
求每个用户相邻两次浏览时间之差小于三分钟的次数。

select
		user_id,
		count(1) as cnt
from (
select
		user_id,
		timestampdiff(next_time,time) as result
from (
	select
			*,
			lead(time,1,0) over(partition by user_id order by time) as next_time
	from user_time
) t1 )t2
where result <= 180
group by user_id



表名为score：用一条 SQL 语句查询出每门课都大于 80 分的学生姓名
name     kecheng  fenshu
张三       语文        81
张三       数学        75
李四       语文        76
李四       数学        90
王五       语文        81
王五       数学        100
王五       英语        90

select
		*
from(
	select
			*
	from score
	group by name
)t2
left join (
	select
			*
	from score
	where score < 80
	group by name
)t1
on score.name = t1.name
where t1.name is null

select distinct name
from score
where name not in
(
    select distinct name
    from score
    where fenshu <= 80
)
一个叫 team 的表，里面只有一个字段 name,一共有 4 条纪录，
分别是 a,b,c,d,对应四个球队，现在四个球队进行比赛，
select
		*
from team
join team
on t1.name < t2.name

select
		*
from (
	select
			year,
			if(month = 1,amount) as m1,
			if(month = 2,amount) as m2,
			if(month = 3,amount) as m3,
			if(month = 4,amount) as m4,
	from column_convert_row
)t2
group by year

select
		*,
		(case when score > 60 then pass
		else fail end ) as mark
from t1

select
		date,
		count(if(result = "win"),1,null) as win,
		count(if(result = "fail"),1,null) as fail
from t1
group by date

有一个订单表 order。
order_id(订单 ID), user_id(用户ID),
amount(金额), pay_datetime(付费时间),channel_id(渠道 ID),dt(分区字段)。
查询 dt=‘2018-09-01‘里每个渠道的订单数，下单人数（去重），总金额。
select
		count(order_id),
		count(distinct user_id),
		sum(amount)
from  order
where dt = "2018-09-01"
group by channel_id

查询 dt=‘2018-09-01‘里每个渠道的金额最大 3 笔订单。
select
		*
from (
	select
			*,
			rank() over(partition by channel_id order by total desc) as ranks
	from (
	select
			 channel_id,
			count(order_id),
			count(distinct user_id),
			sum(amount) as total
	from  order
	where dt = "2018-09-01"
	group by channel_id ) t1
)t2
where t2.ranks <=3

有一个订单表t_order，
order_id(订单ID)，item_id(商品id)，create_time(下单时间)，amount(下单金额)
有一个商品表t_item，
item_id(商品id)，item_name(商品名称)，category(品类)
有一个商品表t_item，
item_id(商品id)，item_name(商品名称)，category_1(一级品类)，category_2(二级品类)
最近一个月，销售数量最多的 10 个商品

select
		item_id,
		count(1) as total
from t_order
where datediff(create_time,current_date) <= 31
group by item_id
order by total desc
limit 10
求留存率问题（方式一）：
select
        cnt2 / (max - max1)  # 留存率
from (
        select
                 count(*) as cnt2,
                 max(cnt) max,
                max(cnt1) max1
        from (
            select
                    *,
                    # 得到用户下一次什么时候登录
                    lead(date,1,"9999-12-31") over (partition by name order by date) as nextday,
                    # 表的总数
                    count(*) over () as cnt,
                    #前一天表登录的人数
                    count(*) over (partition by date) as cnt1
            from (
                select
                        date,
                        name
                from test1
                group by date,name
                # 去重，可能存在一个用户一天登录多次的情况
            )t1
        )t2 where date_add(date,1) = nextday  # 判断用户是否第二天登录
)t3
方式二：

求新用户次日留存率：
主要思路：通过dense_rank() over(partition by user order by date) 得到用户登录
日期排名，为一便是新用户，其余不是。
lead(date,1,"9999-12-31") over(partition by user order by date)得到用户下一次
登录时间。
where ranks = 1   得到新用户
group by dt     通过日期分组
count(if(date_add(dt,1) = nextdt,1,null)) / count(1) as rate    下一天登录了的 / 当天总用户

select
		dt,
		count(if(date_add(dt,1) = nextdt,1,null)) / count(1) as rate
from (
	select
			*
	from (
		select
				*,
				lead(dt,1,"9999-12-31") over(partition by name order by dt) as nextdt,
				dense_rank() over(partition by name order by dt) as ranks
		from (
			select
					name,
					date(dt) as dt
			from tb_rate
			group by date(dt),name
		)t1
	)t2
)t3 where ranks = 1
group by dt


连续登录 n 天问题
with t1 as (
select
  userid,
  logintime,
  --本次登陆日期的第三天
  date_add(logintime,n-1) as nextday,
  --按照用户id分区，按照登陆日期排序，取下下一次登陆时间，取不到就为0
  lead(logintime,n-1,0) over (partition by userid order by logintime) as nextlogin
from tb_login )
select distinct userid from t1 where nextday = nextlogin;

求最大的同时在线/阅读人数
具体的步骤是：
①将用户的进入时间单独拎出来，同时记为1；离开时间单独拎出来，同时记为-1，
这样union这两个表，最后按照时间排序
②然后利用窗口函数对计数（1或者-1）求累计和 按照时间排序
因为题目规定：同一时间有就有出的话先算进来的后算出去的，所以排序
的时候就要看好了先按时间排序，再按计数排序！
③然后再在每个分组里面去求最大的累积和就是最多同时在线的人数了！
例子：
useid  articid    in_time                           out_time
101	  9001	  2021-11-01 10:00:00	   2021-11-01 10:00:11
102	  9001   2021-11-01 10:00:09	  2021-11-01 10:00:38
103	9001      2021-11-01 10:00:28	 2021-11-01 10:00:58
107	9001	 2021-11-01 10:00:01   2021-11-01 10:01:50
题目链接：
https://www.nowcoder.com/practice/fe24c93008b84e9592b35faa15755e48?tpId=268&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=%2Fexam%2Foj%3Fpage%3D1%26tab%3DSQL%25E7%25AF%2587%26topicId%3D268
一二步后的结果：
sum(num) over (partition by artical_id order by dt asc,num desc) as cnt
9001  2021-11-01 10:00:00  1  1
9001  2021-11-01 10:00:01  1  2
9001  2021-11-01 10:00:09  1  3
9001  2021-11-01 10:00:11 -1  2
9001  2021-11-01 10:00:28  1  3
9001  2021-11-01 10:00:38 -1  2
9001  2021-11-01 10:00:51  1  3
9001  2021-11-01 10:00:58 -1  2
9001  2021-11-01 10:00:59  -1  1
9001  2021-11-01 10:01:50 -1  0


以下几个题目利用分而治之思想
数据字段如下：主叫号码，姓名，省份，男，年龄，被叫号码，时间(年月日时分秒)，通话时间
由以下数据随机构成：
16979673722	余鱼同	广东省	女	19
13719952508	张三丰	湖北省	女	87
13723471791	张无忌	广东省	女	77
17323142154	独孤求败	吉林省	男	27
15788158667	洪七公	陕西省	男	46
15100199689	令狐冲	四川省	男	85
19631660062	宁中则	天津市	男	85
16911287096	洛雨	天津市	男 	53
例子：16911287096	洛雨	天津市	男	   53  19631660062	  20220428053103   2306
--- 分析  分而治之思想
---- 用户年主打次数
select tel,name,count(1)  from analysis group by tel,name,substring(date_time,1,4);
--- 用户年跟谁通过话
select b.tel,analysis.name,b.tel1,cnt from analysis join (
    select * from (
          select  tel,tel1,count(tel1) as cnt from analysis group by  tel,tel1
          union
          select tel1,tel,count(tel) as cnt from analysis group by tel1,tel
                  ) a order by a.tel
) b on  analysis.tel = b.tel;
-- 用户年通话次数
select  a.tel,sum(a.cnt) from (
      select  tel,count(tel1) as cnt from analysis group by  tel
      union
      select tel1,count(tel) as cnt from analysis group by tel1
  ) a group by tel;
--- 亲密度统计
with t1 as (
    select tel,tel1,sum(duration) as cnt from analysis group by tel, tel1
    union
    select tel1,tel,sum(duration) as cnt  from analysis group by tel1, tel
),t2 as (
    select tel,max(cnt) max_cnt from t1 group by  tel
)
select t1.tel,t1.tel1,t1.cnt from t1 join t2 on t1.tel = t2.tel and t1.cnt = t2.max_cnt;

select * from (
      select tel,tel1,sum(duration) as cnt from analysis group by tel, tel1
      union
      select tel1,tel,sum(duration) as cnt  from analysis group by tel1, tel
                  ) a where (a.tel,a.cnt) in (
                                                 select tel,max(v.cnt) from (
                                                           select tel,sum(duration) as cnt from analysis group by tel,tel1
                                                           union
                                                           select tel,sum(duration) as cnt  from analysis group by  tel,tel1) v
                                                 group by v.tel )
                      order by cnt desc ;
-- 用户月跟谁通过话以及通话时间
select b.tel,a.name,b.tel1,b.mouth1,total,cnt from analysis a join (
    select tel,tel1,substring(date_time,5,2) as mouth1,sum(duration) as total ,count(tel) as cnt
    from analysis group by tel,tel1,substring(date_time,5,2)
    union
    select tel1,tel1,substring(date_time,5,2) as mouth1,sum(duration) as total,count(tel) as cnt
    from analysis group by tel,tel1,substring(date_time,5,2)
    order by tel
) b on a.tel = b.tel;
-- 用户年龄分布 得到通话时间长度与年龄的关系
select b.tel,age,b.sum1 from  base join (
    select tel, sum(a.total) as sum1 from (
              select tel,sum(duration) as total from analysis group by tel
              union
              select tel1,sum(duration) as total from analysis group by tel1
          ) a group by tel
) b on base.tel = b.tel;
-- 用户年通话时间取 top 10
select * from (
select tel,sum1,rank() over (order by sum1) as top10  from (
     select tel, sum(a.total) as sum1 from (
           select tel,sum(duration) as total from analysis group by tel
           union
           select tel1,sum(duration) as total from analysis group by tel1
                        ) a group by tel
                           ) n
              ) m where m.top10  < 11;
--- 用户省份分布   -- 用户通话次数的性别姓名 -- 用户月通话时间明细 over
select split(address,"-")[0] as province,count(1) from analysis group by split(address,"-")[0];
-- 用户通话次数的性别姓名
select c.*,a.name,a.gender from  (select distinct  name,gender,tel from analysis) a join (
    select * from (
                      select tel,tel1,sum(duration) as cnt from analysis group by tel, tel1
                      union
                      select tel1,tel,sum(duration) as cnt  from analysis group by tel1, tel
                  ) a where (a.tel,a.cnt) in (
        select tel,max(v.cnt) from (
                                       select tel,sum(duration) as cnt from analysis group by tel,tel1
                                       union
                                       select tel,sum(duration) as cnt  from analysis group by  tel,tel1
                                   )  v  group by v.tel ) order by cnt desc
) c on a.tel = c.tel1;
-- 用户月通话时间明细 over
set mapreduce.job.reduce = 3;
select * from (
                  select  tel,tel1,sum(duration)
                                       over (partition by substring(date_time,6,2),tel order by substring(date_time,6,2)) as total
                  from analysis
                  union
                  select tel1,tel,sum(duration)
                                      over (partition by substring(date_time,6,2),tel1 order by substring(date_time,6,2)) as total
                  from analysis
              ) a

-- 用户通话分钟的性别姓名
with t1 as (
    select tel,tel1,sum(duration) as cnt from analysis group by tel, tel1
    union
    select tel1,tel,sum(duration) as cnt  from analysis group by tel1, tel
),t2 as (
    select tel,max(cnt) max_cnt from t1 group by  tel
),t3 as (select t1.tel,t1.tel1,t1.cnt from t1 join t2 on t1.tel = t2.tel and t1.cnt = t2.max_cnt)
select t3.*,base.age,base.gender from t3 join base on t3.tel1 = base.tel;

select c.*,a.name,a.gender from  (select distinct  name,gender,tel from analysis) a join (
    select * from (
                      select tel,tel1,sum(duration) as cnt from analysis group by tel, tel1
                      union
                      select tel1,tel,sum(duration) as cnt  from analysis group by tel1, tel
                  ) a where (a.tel,a.cnt) in (
        select tel,max(v.cnt) from (
                                       select tel,sum(duration) as cnt from analysis group by tel,tel1
                                       union
                                       select tel,sum(duration) as cnt  from analysis group by  tel,tel1
                                   )  v  group by v.tel ) order by cnt desc
) c on a.tel = c.tel1;


拉链表：
具体实现思路：首先得到每日修改的表，然后和截至到当日未过期的数据进行拼接union
通过row_number() over(partition by name order by sdt desc) as rn
可以得到一个标号，如果存在rn =2即说明该数据为修改数据，所以要修改
if(rn=2,date_sub(date(now()),1),edt) as edt,   上一条数据昨天已经过期
if(rn=2,date_sub(sdt,1),edt) as partitonKey    用于分区key
具体SQL：
select
		name,
		tel,
		sdt,
		if(rn=2,date_sub(date(now()),1),edt) as edt,
		if(rn=2,date_sub(date(now()),1),edt) as partitonKey
from (
	select
			*,
			row_number() over(partition by name order by sdt desc) as rn
	from (
		select
				*
		from zip
		union
		select
				*
		from tmp
	)t1
)t2


对于既要修改，又要插入，累积型快照事务表
可以采取的SQL。思想：
首先将未过期的表拿出来，每日修改表拿过来
见两张表进行连接 union
随后以此表和每日修改表进行left join
这样就得到了修改以及新增的表，由于数据
可能会重复，利用group by 进行去重
insert  overwrite tabel t
select
	a1.id,
	a1.od,
	t1.pay,
	t1.final
from (
    select * from t
    union
    select * from t1
)a1 left join t1 on a1.id = t1.id
group by
a1.id,
a1.od,
t1.pay,
t1.final

聚合函数不会统计null , 一个小应用
表数据:
name   sex     deptid
java      男        1
scala     男        2
hdfs      女        3
hbase      女        2
hive      男        1
spark      女        3
统计各个部门男女人数:  利用聚合函数计算会排除空值特点
select deptid,count(if(sex="男",1,null) as sum_man,
count(if(sex="女",1,null) as sum_man,
from emp group by deptid

hive json_tuple 的用法
select
       字段1，
       字段2，
       字段3
from 表名
lateral view json_tuple(
"key1",
"key2",
"key3",
"key4"
) t as
字段1
字段2
字段3
字段4

每个月Top3的周杰伦歌曲
从听歌流水中找到18-25岁用户在2022年每个月播放次数top 3的周杰伦的歌曲
输入例子：
drop table if exists play_log;
create table `play_log` (
    `fdate` date,
    `user_id` int,
    `song_id` int
);
insert into play_log(fdate, user_id, song_id)
values 
('2022-01-08', 10000, 0),
('2022-01-16', 10000, 0),
('2022-01-20', 10000, 0),
('2022-01-25', 10000, 0),
('2022-01-02', 10000, 1),
('2022-01-12', 10000, 1),
('2022-01-13', 10000, 1),
('2022-01-14', 10000, 1),
('2022-01-10', 10000, 2),
('2022-01-11', 10000, 3),
('2022-01-16', 10000, 3),
('2022-01-11', 10000, 4),
('2022-01-27', 10000, 4),
('2022-02-05', 10000, 0),
('2022-02-19', 10000, 0),
('2022-02-07', 10000, 1),
('2022-02-27', 10000, 2),
('2022-02-25', 10000, 3),
('2022-02-03', 10000, 4),
('2022-02-16', 10000, 4);

drop table if exists song_info;
create table `song_info` (
    `song_id` int,
    `song_name` varchar(255),
    `singer_name` varchar(255)
);
insert into song_info(song_id, song_name, singer_name) 
values
(0, '明明就', '周杰伦'),
(1, '说好的幸福呢', '周杰伦'),
(2, '江南', '林俊杰'),
(3, '大笨钟', '周杰伦'),
(4, '黑键', '林俊杰');

drop table if exists user_info;
create table `user_info` (
    `user_id`   int,
    `age`       int
);
insert into user_info(user_id, age) 
values
(10000, 18)
输出例子：
month|ranking|song_name|play_pv
1|1|明明就|4
1|2|说好的幸福呢|4
1|3|大笨钟|2
2|1|明明就|2
2|2|说好的幸福呢|1
2|3|大笨钟|1
例子说明：
1月被18-25岁用户播放次数最高的三首歌为“明明就”、“说好的幸福呢”、“大笨钟”，“明明就”和“说好的幸福呢”播放次数相同，排名先后由两者的song_id先后顺序决定。2月同理。
select
		m month,
		ranks ranking,
		song_name,
		cnt play_pv
from (
		select
				*,
				row_number() over(partition by m order by cnt desc , song_id) ranks
		from (
				select
						m,
						singer_name,
						song_name,
						song_id,
						count(1) as cnt
				from (
					select
							t1.*,
							t2.*,
							month(t3.fdate) m
					from play_log t3
					join (select * from song_info where singer_name = "周杰伦") t1
					on t3.song_id = t1.song_id
					join  (select * from user_info  where age between 18 and 25) t2
					on t3.user_id = t2.user_id
					where year(fdate) = 2022
				)t4 group by m,singer_name,song_name,song_id
		)t5
)t6 where ranks <= 3
order by m,cnt desc ,song_id


关于hive 的一个优化：尽量用group by 去重
把“小表放在前面做关联可以提高效率”这种说法，更正确的说法
应该是“把重复关联键少的表放在join前面做关联可以提高join的效率”
set mapreduce.job.reduce = 3

